{"version":3,"sources":["webpack:///src/app/modules/order-management/address-info/address-info.component.html","webpack:///src/app/modules/order-management/address-info/address-info.component.ts","webpack:///src/app/modules/order-management/services/order.service.ts","webpack:///src/app/modules/user-management/components/basic/add/add.component.html","webpack:///src/app/modules/user-management/components/basic/add/add.component.ts","webpack:///src/app/modules/user-management/models/role.type.enum.ts","webpack:///src/app/modules/user-management/services/custom-validation.ts","webpack:///src/app/modules/user-management/services/user.service.ts"],"names":["AddressInfoComponent","orderService","ref","config","addressId","data","getAddressInfo","id","getAddress","subscribe","addressInfo","OrderService","http","prefix","pageNumber","pageSize","get","endPoint","orderId","statusNo","reqBody","status","put","api","pipe","res","AddComponent","messageService","UserService","mode","userType","userForm","form","console","log","patchValue","valid","markAllAsTouched","add","severity","summary","detail","life","user","value","addUser","close","error","editUser","RoleType","MustMatch","controlName","matchingControlName","formGroup","control","controls","matchingControl","errors","mustMatch","setErrors","fb","group","firstName","required","lastName","email","userName","password","updateOn","validators","minLength","pattern","confirmPassword","validator","dialogService","open","builderForm","header","width","contentStyle","Role","accountApi","post","userId","type","newData","businessStatus"],"mappings":"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","file":"default~components-admins-admins-module-ngfactory~components-basic-basic-module-ngfactory~components~d9705d40-es5.js","sourcesContent":["<table class=\"table\">\r\n  <tbody>\r\n    <tr>\r\n      <th>full name :</th>\r\n      <td>{{addressInfo?.fullName?addressInfo.fullName:'FullName'}}</td>\r\n    </tr>\r\n    <tr>\r\n      <th>address1 :</th>\r\n      <td>{{addressInfo?.address1?addressInfo.address1:'Address 1'}}</td>\r\n    </tr>\r\n    <tr>\r\n      <th>address2 :</th>\r\n      <td>{{addressInfo?.address2?addressInfo.address2:'Address 2'}}</td>\r\n    </tr>\r\n    <tr>\r\n      <th>city :</th>\r\n      <td>{{addressInfo?.city?addressInfo.city:'City'}}</td>\r\n    </tr>\r\n    <tr>\r\n      <th>country :</th>\r\n      <td>{{addressInfo?.country?addressInfo.country:'Country'}}</td>\r\n    </tr>\r\n    <tr>\r\n      <th>phone :</th>\r\n      <td>{{addressInfo?.phone?addressInfo.phone:'Phone'}}</td>\r\n    </tr>\r\n    <tr>\r\n      <th>postCode :</th>\r\n      <td>{{addressInfo?.postCode?addressInfo.postCode:'PostCode'}}</td>\r\n    </tr>\r\n    <tr>\r\n      <th>created :</th>\r\n      <td>{{addressInfo?.created?addressInfo.created:\"date\"}}</td>\r\n    </tr>\r\n  </tbody>\r\n</table>","import { Component, OnInit } from '@angular/core';\r\nimport { MessageService } from 'primeng/api';\r\nimport { DynamicDialogRef, DynamicDialogConfig } from 'primeng/dynamicdialog';\r\nimport { OrderService } from '../services/order.service';\r\n\r\n@Component({\r\n  selector: 'app-address-info',\r\n  templateUrl: './address-info.component.html',\r\n  styleUrls: ['./address-info.component.scss'],\r\n})\r\nexport class AddressInfoComponent implements OnInit {\r\n  addressId: number;\r\n  addressInfo\r\n  constructor(private orderService: OrderService, public ref: DynamicDialogRef, public config: DynamicDialogConfig,) { }\r\n\r\n  ngOnInit(): void {\r\n    this.addressId = this.config.data.addressId\r\n    this.getAddressInfo(this.addressId);\r\n  }\r\n\r\n\r\n  getAddressInfo(id) {\r\n    this.orderService.getAddress(id).subscribe(data => {\r\n      this.addressInfo = data;\r\n    })\r\n  }\r\n\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { map } from 'rxjs/operators';\r\nimport { ApiResponse } from 'src/app/models/api-response.model';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class OrderService {\r\n  prefix: string = \"Order\"\r\n  get endPoint(): string { return `${environment.api}/${this.prefix}` }\r\n  constructor(private http: HttpClient) { }\r\n\r\n\r\n  getlistOrder({ pageNumber = 1, pageSize = 10 }) {\r\n    return this.http.get<ApiResponse>(`${this.endPoint}/?PageNumber=${pageNumber}&PageSize=${pageSize}`)\r\n  }\r\n\r\n  changeOrderRequestStatus(orderId: number, statusNo: number) {\r\n    let reqBody = {\r\n      id: orderId,\r\n      status: statusNo\r\n    }\r\n    return this.http.put<ApiResponse<number>>(`${this.endPoint}/updateStatus-${orderId}`, reqBody)\r\n  }\r\n\r\n  deleteOrderRequest(id: number) {\r\n    return this.http.delete<ApiResponse<number>>(`${this.endPoint}/${id}`)\r\n  }\r\n\r\n  getAddress(id: number) {\r\n    return this.http.get<ApiResponse<number>>(`${environment.api}/Address/${id}`).pipe(map(res => {\r\n      return res.data\r\n    }))\r\n  }\r\n}\r\n","<p-toast></p-toast>\r\n\r\n<form *ngIf=\"userForm\" [formGroup]=\"userForm\" (ngSubmit)=\"handleUser()\" class=\"p-fluid\">\r\n\r\n  <div class=\"p-fluid p-formgrid p-grid\">\r\n\r\n    <div class=\"p-field p-col-12 p-md-6\">\r\n      <label for=\"firstName\" class=\"p-col-12\">First Name</label>\r\n      <input formControlName=\"firstName\" id=\"firstName\" type=\"text\" pInputText>\r\n    </div>\r\n\r\n    <div class=\"p-field p-col-12 p-md-6\">\r\n      <label for=\"lastName\" class=\"p-col-12 \">Last Name</label>\r\n      <input formControlName=\"lastName\" id=\"lastName\" type=\"text\" pInputText>\r\n    </div>\r\n\r\n    <div class=\"p-field p-col-12 p-md-6\">\r\n      <label for=\"userName\" class=\"p-col-12 \">userName</label>\r\n      <input formControlName=\"userName\" id=\"userName\" type=\"text\" pInputText>\r\n    </div>\r\n\r\n    <div class=\"p-field p-col-6\">\r\n      <label for=\"email\" class=\"p-col-12 \">Email</label>\r\n      <input formControlName=\"email\" id=\"email\" type=\"text\" pInputText>\r\n    </div>\r\n\r\n    <div class=\"p-field p-col-6\" *ngIf=\"mode==='Add'\">\r\n      <label for=\"password\" class=\"p-col-12 \">password</label>\r\n      <input formControlName=\"password\" id=\"password\" type=\"text\" pInputText>\r\n    </div>\r\n\r\n    <div class=\"p-field p-col-6\" *ngIf=\"mode==='Add'\">\r\n      <label for=\"confirmPassword\" class=\"p-col-12 \">confirmPassword</label>\r\n      <input formControlName=\"confirmPassword\" id=\"confirmPassword\" type=\"text\" pInputText>\r\n    </div>\r\n\r\n    <button pButton type=\"submit\" label=\"{{mode}} User\" [disabled]=\"!userForm.valid\"></button>\r\n  </div>\r\n\r\n</form>","import { HttpErrorResponse } from '@angular/common/http';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormControl, Validators, FormBuilder } from '@angular/forms';\r\nimport { MessageService } from 'primeng/api';\r\nimport { DynamicDialogRef, DynamicDialogConfig } from 'primeng/dynamicdialog';\r\nimport { RoleType } from '../../../models/role.type.enum';\r\nimport { UserService } from '../../../services/user.service';\r\nimport { UserFormGroup } from '../../../services/userForm';\r\n\r\n\r\n@Component({\r\n  selector: 'app-add',\r\n  templateUrl: './add.component.html',\r\n  styleUrls: ['./add.component.scss']\r\n})\r\nexport class AddComponent implements OnInit {\r\n  mode: string;\r\n  data: {};\r\n  userType: string\r\n  userForm: FormGroup;\r\n  constructor(\r\n    private messageService: MessageService,\r\n    public ref: DynamicDialogRef,\r\n    public config: DynamicDialogConfig,\r\n    private UserService: UserService,\r\n  ) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.mode = this.config.data.mode;\r\n    this.userType = this.config.data.userType\r\n    this.userForm = this.config.data.form();\r\n    this.data = this.config.data.data ? this.config.data.data : null;\r\n    if (this.data) {\r\n      console.log(this.data)\r\n      this.userForm.patchValue(this.data);\r\n    }\r\n  }\r\n\r\n  // createUserForm() {\r\n  //   this.userForm = this.UserService.builderForm(this.fb);\r\n  // }\r\n\r\n  handleUser() {\r\n    if (!this.userForm.valid) {\r\n      this.userForm.markAllAsTouched();\r\n      return this.messageService.add({ severity: 'Error', summary: 'Required Field', detail: 'Required Input', life: 3000 });\r\n    }\r\n\r\n    if (this.mode === \"Add\") {\r\n      let user = this.userForm.value;\r\n      user['role'] = RoleType[this.userType];\r\n      this.UserService.addUser(this.userForm.value).subscribe(data => {\r\n        this.ref.close('User Added');\r\n      },\r\n        (error: HttpErrorResponse) => {\r\n          console.log(error)\r\n          this.messageService.add({ severity: 'Error', summary: 'User', detail: error.error['message'], life: 2000 });\r\n        }\r\n      )\r\n    } else if (this.mode === \"Edit\") {\r\n      this.UserService.editUser(this.data['id'], \"Basic\", this.userForm.value).subscribe(data => {\r\n        this.ref.close('User Edited');\r\n      })\r\n    }\r\n  }\r\n\r\n}\r\n","export enum RoleType {\r\n  superadmin = 1,\r\n  admin = 2,\r\n  moderator = 3,\r\n  basic = 4,\r\n  business = 5\r\n}","import { FormGroup } from '@angular/forms';\r\n\r\n\r\n// custom validator to check that two fields match\r\nexport function MustMatch(controlName: string, matchingControlName: string) {\r\n  return (formGroup: FormGroup) => {\r\n      const control = formGroup.controls[controlName];\r\n      const matchingControl = formGroup.controls[matchingControlName];\r\n\r\n      if (matchingControl.errors && !matchingControl.errors.mustMatch) {\r\n          // return if another validator has already found an error on the matchingControl\r\n          return;\r\n      }\r\n\r\n      // set error on matchingControl if validation fails\r\n      if (control.value !== matchingControl.value) {\r\n          matchingControl.setErrors({ mustMatch: true });\r\n      } else {\r\n          matchingControl.setErrors(null);\r\n      }\r\n  }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { ConfirmationService, MessageService } from 'primeng/api';\r\nimport { DialogService } from 'primeng/dynamicdialog';\r\nimport { map } from 'rxjs/operators';\r\nimport { environment } from 'src/environments/environment';\r\nimport { AddressInfoComponent } from '../../order-management/address-info/address-info.component';\r\nimport { AddComponent } from '../components/basic/add/add.component';\r\nimport { User, UserGrouped } from '../models/user.model';\r\nimport { MustMatch } from './custom-validation';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UserService {\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n\r\n  builderForm(fb: FormBuilder, mode): FormGroup {\r\n    let form = fb.group({\r\n      firstName: new FormControl('', [Validators.required]),\r\n      lastName: new FormControl('', [Validators.required]),\r\n      email: new FormControl('', [Validators.required]),\r\n      userName: new FormControl('', [Validators.required]),\r\n    })\r\n    if (mode === 'Add') {\r\n      return fb.group({\r\n        firstName: new FormControl('', [Validators.required]),\r\n        lastName: new FormControl('', [Validators.required]),\r\n        email: new FormControl('', [Validators.required]),\r\n        userName: new FormControl('', [Validators.required]),\r\n        password: new FormControl('', {\r\n          updateOn: 'change',\r\n          validators: [\r\n            Validators.required,\r\n            Validators.minLength(6),\r\n            Validators.pattern(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?{}()&])[A-Za-z\\d@$!%*#?{}()&]{8,}$/),\r\n          ]\r\n        }),\r\n        confirmPassword: new FormControl('', {\r\n          updateOn: 'change',\r\n          validators: [Validators.required],\r\n        }),\r\n      },\r\n        { validator: MustMatch('password', 'confirmPassword') }\r\n      )\r\n\r\n    } else {\r\n      return form\r\n    }\r\n  }\r\n\r\n\r\n  addOrEdit(mode, data, userType, dialogService: DialogService, fb: FormBuilder) {\r\n    return dialogService.open(AddComponent, {\r\n      data: {\r\n        data,\r\n        mode: mode,\r\n        userType,\r\n        form: () => this.builderForm(fb, mode)\r\n      },\r\n      header: `${mode} ${userType} User`,\r\n      width: '50%',\r\n      contentStyle: { \"max-height\": \"500px\", \"overflow\": \"auto\" }\r\n    });\r\n  }\r\n\r\n  getAddressInfo(addressId, dialogService: DialogService) {\r\n    return dialogService.open(AddressInfoComponent, {\r\n      data: {\r\n        addressId,\r\n      },\r\n      header: `Address Info`,\r\n      width: '30%',\r\n      contentStyle: { \"max-height\": \"500px\", \"overflow\": \"auto\" },\r\n    });\r\n  }\r\n\r\n  getAllUsers(Role: number) {\r\n    return this.http.get(`${environment.accountApi}/GetAllUsers?Role=${Role}`).pipe(map((res: UserGrouped) => {\r\n      return res\r\n    }))\r\n  }\r\n\r\n  addUser(user: User) {\r\n    return this.http.post(`${environment.accountApi}/addAccount`, user).pipe(map(res => {\r\n      return res\r\n    }))\r\n  }\r\n\r\n  editUser(userId: number, type: string, newData: User) {\r\n    return this.http.put(`${environment.accountApi}/update${type}-${userId}`, newData).pipe(map(res => {\r\n      return res\r\n    }))\r\n  }\r\n\r\n\r\n  deleteUser(userId: string) {\r\n    return this.http.delete(`${environment.accountApi}/${userId}`).pipe(map(res => {\r\n      return res\r\n    }))\r\n  }\r\n\r\n  changeStatus({ email, businessStatus }) {\r\n    return this.http.post(`${environment.accountApi}/accept-business-user`, { email, businessStatus }).pipe(map(res => {\r\n      return res\r\n    }))\r\n  }\r\n}\r\n"]}